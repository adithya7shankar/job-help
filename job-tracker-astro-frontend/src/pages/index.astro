---
// src/pages/index.astro
import MainLayout from '../layouts/MainLayout.astro';

const pageTitle = "Job Application Tracker";
---

<MainLayout title={pageTitle}>
    <div class="container"> {/* This container is for the page-specific content area */}
        <h1>{pageTitle}</h1>

        <div id="emailParserSection" style="margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px; background-color: #e9ecef;">
            <h2>Parse Email to Pre-fill Form</h2>
            <div>
                <label for="emailText">Paste Email Content Here:</label>
                <textarea id="emailText" rows="8" style="width: 100%; box-sizing: border-box; font-family: inherit; font-size: 0.95em;"></textarea>
            </div>
            <button type="button" id="parseEmailButton" style="margin-top: 10px;">Parse Email & Pre-fill Form</button>
        </div>

        <form id="addJobForm">
            <div>
                <label for="companyName">Company Name:</label>
                <input type="text" id="companyName" name="companyName" required />
            </div>
            <div>
                <label for="jobTitle">Job Title:</label>
                <input type="text" id="jobTitle" name="jobTitle" required />
            </div>
            <div>
                <label for="applicationDate">Application Date:</label>
                <input type="date" id="applicationDate" name="applicationDate" required />
            </div>
            <div>
                <label for="status">Status:</label>
                <select id="status" name="status">
                    <option value="Wishlist/To Apply">Wishlist/To Apply</option>
                    <option value="Applied">Applied</option>
                    <option value="Online Assessment">Online Assessment</option>
                    <option value="HR Screening">HR Screening</option>
                    <option value="Technical Interview (Round 1)">Technical Interview (Round 1)</option>
                    <option value="Technical Interview (Round 2+)">Technical Interview (Round 2+)</option>
                    <option value="Hiring Manager Interview">Hiring Manager Interview</option>
                    <option value="On-site/Final Interview">On-site/Final Interview</option>
                    <option value="Offer Extended">Offer Extended</option>
                    <option value="Offer Accepted">Offer Accepted</option>
                    <option value="Offer Declined">Offer Declined</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Withdrew Application">Withdrew Application</option>
                </select>
            </div>
            <div>
                <label for="jobLink">Job Posting Link (optional):</label>
                <input type="text" id="jobLink" name="jobLink" />
            </div>
            <button type="submit">Add Job Application</button>
        </form>

        <h2>Current Applications</h2>
        <ul id="jobList">
            <!-- Job applications will be listed here by JavaScript -->
        </ul>
    </div>

    <script>
        // Client-side JavaScript
        const emailParserSection = document.getElementById('emailParserSection');
        const emailTextInput = document.getElementById('emailText');
        const parseEmailButton = document.getElementById('parseEmailButton');
        const jobForm = document.getElementById('addJobForm');
        const jobListUl = document.getElementById('jobList');
        let applications = []; // In-memory store

        // Function to render applications to the list
        function renderApplications() {
            jobListUl.innerHTML = ''; // Clear existing list
            if (applications.length === 0) {
                jobListUl.innerHTML = '<li class="no-data">No applications tracked yet.</li>'; // Added class for styling
                return;
            }
            applications.forEach((app, index) => {
                const li = document.createElement('li');
                // Using classes from global.css for job item structure
                li.className = 'job-item'; 
                li.innerHTML = `
                    <h3>${app.jobTitle}</h3>
                    <p class="company"><strong>Company:</strong> ${app.companyName}</p>
                    <p><strong>Date Applied:</strong> ${app.applicationDate}</p>
                    <p><strong>Status:</strong> ${app.status}</p>
                    <p><strong>Link:</strong> ${app.jobLink ? `<a href="${app.jobLink}" target="_blank">${app.jobLink}</a>` : 'N/A'}</p>
                    <div style="margin-top: 10px;">
                        <button onclick="editApplicationPrompt(${index})" style="margin-right: 5px;">Edit Status</button>
                        <button onclick="deleteApplication(${index})">Delete</button>
                    </div>
                `;
                jobListUl.appendChild(li);
            });
        }

        // Handle form submission
        jobForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const newApp = {
                companyName: event.target.companyName.value,
                jobTitle: event.target.jobTitle.value,
                applicationDate: event.target.applicationDate.value,
                status: event.target.status.value,
                jobLink: event.target.jobLink.value,
            };
            applications.push(newApp);
            renderApplications();
            jobForm.reset();
        });

        // Function to delete an application
        window.deleteApplication = function(index) {
            applications.splice(index, 1);
            renderApplications();
        }
        
        // Function to prompt for editing application status
        window.editApplicationPrompt = function(index) {
            const app = applications[index];
            if (!app) return;

            const promptMessage = "Enter new status for \"" + app.jobTitle + "\" at \"" + app.companyName + "\":\nAvailable: " + getStatuses().join(", ");
            const newStatus = prompt(promptMessage, app.status);
            
            if (newStatus && getStatuses().includes(newStatus)) {
                app.status = newStatus;
                renderApplications();
            } else if (newStatus !== null) {
                alert("Invalid status entered.");
            }
        }

        function getStatuses() {
             return [
                "Wishlist/To Apply", "Applied", "Online Assessment", "HR Screening",
                "Technical Interview (Round 1)", "Technical Interview (Round 2+)",
                "Hiring Manager Interview", "On-site/Final Interview", "Offer Extended",
                "Offer Accepted", "Offer Declined", "Rejected", "Withdrew Application"
            ];
        }

        // Email Parsing Logic
        parseEmailButton.addEventListener('click', function() {
            const emailContent = emailTextInput.value;
            if (!emailContent.trim()) {
                alert("Please paste some email content.");
                return;
            }

            let companyName = "";
            let jobTitle = "";
            let status = "Applied"; // Default for application confirmations

            // Attempt to parse Company Name
            // Example: "at [CompanyName]." or "Team [CompanyName]"
            let companyMatch = emailContent.match(/at\s+([A-Za-z0-9\s]+)\./i);
            if (companyMatch && companyMatch[1]) {
                companyName = companyMatch[1].trim();
                // Further refinement if company name is followed by "Talent Acquisition" or similar
                const talentAcqMatch = companyName.match(/(.*)\s+Talent Acquisition/i);
                if (talentAcqMatch && talentAcqMatch[1]) {
                    companyName = talentAcqMatch[1].trim();
                }
            } else {
                companyMatch = emailContent.match(/Team\s+([A-Za-z0-9\s]+)/i);
                if (companyMatch && companyMatch[1]) {
                    companyName = companyMatch[1].trim();
                }
            }
            
            // Attempt to parse Job Title
            // Example: "the [Job Title] position"
            const jobTitleMatch = emailContent.match(/the\s+(.+?)\s+position/i);
            if (jobTitleMatch && jobTitleMatch[1]) {
                jobTitle = jobTitleMatch[1].trim();
            }

            // Pre-fill the form
            jobForm.companyName.value = companyName;
            jobForm.jobTitle.value = jobTitle;
            jobForm.status.value = status; // Set default status

            // Optionally, clear the textarea
            // emailTextInput.value = ""; 
            alert("Form pre-filled based on email text. Please review and add application date.");
        });

        // Initial render
        renderApplications();
    </script>
</MainLayout>
