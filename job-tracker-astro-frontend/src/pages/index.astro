---
// src/pages/index.astro
import MainLayout from '../layouts/MainLayout.astro';

const pageTitle = "Job Application Tracker";
---

<MainLayout title={pageTitle}>
    <div class="container"> {/* This container is for the page-specific content area */}
        <h1>{pageTitle}</h1>

        <div id="emailParserSection" style="margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px; background-color: #e9ecef;">
            <h2>Parse Email to Pre-fill Form</h2>
            <div>
                <label for="emailText">Paste Email Content Here:</label>
                <textarea id="emailText" rows="8" style="width: 100%; box-sizing: border-box; font-family: inherit; font-size: 0.95em;"></textarea>
            </div>
            <button type="button" id="parseEmailButton" style="margin-top: 10px;">Parse Email & Pre-fill Form</button>
        </div>

        <form id="addJobForm">
            <div>
                <label for="companyName">Company Name:</label>
                <input type="text" id="companyName" name="companyName" required />
            </div>
            <div>
                <label for="jobTitle">Job Title:</label>
                <input type="text" id="jobTitle" name="jobTitle" required />
            </div>
            <div>
                <label for="applicationDate">Application Date:</label>
                <input type="date" id="applicationDate" name="applicationDate" required />
            </div>
            <div>
                <label for="status">Status:</label>
                <select id="status" name="status">
                    <option value="Wishlist/To Apply">Wishlist/To Apply</option>
                    <option value="Applied">Applied</option>
                    <option value="Online Assessment">Online Assessment</option>
                    <option value="HR Screening">HR Screening</option>
                    <option value="Technical Interview (Round 1)">Technical Interview (Round 1)</option>
                    <option value="Technical Interview (Round 2+)">Technical Interview (Round 2+)</option>
                    <option value="Hiring Manager Interview">Hiring Manager Interview</option>
                    <option value="On-site/Final Interview">On-site/Final Interview</option>
                    <option value="Offer Extended">Offer Extended</option>
                    <option value="Offer Accepted">Offer Accepted</option>
                    <option value="Offer Declined">Offer Declined</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Withdrew Application">Withdrew Application</option>
                </select>
            </div>
            <div>
                <label for="jobLink">Job Posting Link (optional):</label>
                <input type="text" id="jobLink" name="jobLink" />
            </div>
            <button type="submit">Add Job Application</button>
        </form>

        <h2>Current Applications</h2>
        <ul id="jobList">
            <!-- Job applications will be listed here by JavaScript -->
        </ul>
    </div>

    <script>
        const emailParserSection = document.getElementById('emailParserSection');
        const emailTextInput = document.getElementById('emailText');
        const parseEmailButton = document.getElementById('parseEmailButton');
        const jobForm = document.getElementById('addJobForm');
        const jobListUl = document.getElementById('jobList');
        
        // Store applications data globally on the client-side for simplicity in this example
        // In a more complex app, you might use a state management solution or pass data around more explicitly.
        let currentApplications = [];

        async function fetchApplications() {
            try {
                const response = await fetch('/api/applications');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                currentApplications = await response.json();
                renderApplications();
            } catch (error) {
                console.error("Failed to fetch applications:", error);
                jobListUl.innerHTML = '<li class="no-data">Error loading applications. Check console.</li>';
            }
        }

        function renderApplications() {
            jobListUl.innerHTML = ''; 
            if (currentApplications.length === 0) {
                jobListUl.innerHTML = '<li class="no-data">No applications tracked yet.</li>';
                return;
            }
            currentApplications.forEach(app => { // No index needed if using app.id
                const li = document.createElement('li');
                li.className = 'job-item';
                li.dataset.id = app.id; // Store id for updates/deletes
                li.innerHTML = `
                    <h3>${app.job_title}</h3>
                    <p class="company"><strong>Company:</strong> ${app.company_name}</p>
                    <p><strong>Date Applied:</strong> ${app.application_date || 'N/A'}</p>
                    <p><strong>Status:</strong> ${app.status}</p>
                    <p><strong>Link:</strong> ${app.job_link ? `<a href="${app.job_link}" target="_blank" rel="noopener noreferrer">${app.job_link}</a>` : 'N/A'}</p>
                    <p><strong>Notes:</strong> ${app.notes || ''}</p>
                    <div style="margin-top: 10px;">
                        <button onclick="editApplicationPrompt(${app.id})" style="margin-right: 5px;">Edit Status</button>
                        <button onclick="deleteApplication(${app.id})">Delete</button>
                    </div>
                `;
                jobListUl.appendChild(li);
            });
        }

        jobForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            const newAppPayload = {
                company_name: event.target.companyName.value,
                job_title: event.target.jobTitle.value,
                application_date: event.target.applicationDate.value,
                status: event.target.status.value,
                job_link: event.target.jobLink.value,
                notes: "" // Add a notes field to the form later if desired
            };

            try {
                const response = await fetch('/api/applications', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(newAppPayload)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                }
                // const addedApp = await response.json(); // The API returns the created app
                // currentApplications.push(addedApp); // Or just refetch all for simplicity
                await fetchApplications(); // Refetch all to ensure list is up-to-date
                jobForm.reset();
            } catch (error) {
                console.error("Failed to add application:", error);
                alert(`Error adding application: ${error.message}`);
            }
        });

        window.deleteApplication = async function(id) {
            if (!confirm("Are you sure you want to delete this application?")) return;
            try {
                const response = await fetch(`/api/applications/${id}`, { method: 'DELETE' });
                if (!response.ok && response.status !== 204) { // 204 No Content is a success
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                }
                // currentApplications = currentApplications.filter(app => app.id !== id);
                // renderApplications();
                await fetchApplications(); // Refetch for simplicity
            } catch (error) {
                console.error("Failed to delete application:", error);
                alert(`Error deleting application: ${error.message}`);
            }
        }
        
        window.editApplicationPrompt = async function(id) {
            const appToEdit = currentApplications.find(app => app.id === id);
            if (!appToEdit) {
                alert("Application not found for editing.");
                return;
            }

            const promptMessage = "Enter new status for \"" + appToEdit.job_title + "\" at \"" + appToEdit.company_name + "\":\nAvailable: " + getStatuses().join(", ");
            const newStatus = prompt(promptMessage, appToEdit.status);
            
            if (newStatus && getStatuses().includes(newStatus) && newStatus !== appToEdit.status) {
                try {
                    const response = await fetch(`/api/applications/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: newStatus }) // Only send the status to update
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                    }
                    // const updatedApp = await response.json();
                    // const appIndex = currentApplications.findIndex(app => app.id === id);
                    // if (appIndex !== -1) currentApplications[appIndex] = updatedApp;
                    // renderApplications();
                    await fetchApplications(); // Refetch for simplicity
                } catch (error) {
                    console.error("Failed to update status:", error);
                    alert(`Error updating status: ${error.message}`);
                }
            } else if (newStatus !== null && !getStatuses().includes(newStatus)) {
                alert("Invalid status entered.");
            }
        }

        function getStatuses() {
             return [
                "Wishlist/To Apply", "Applied", "Online Assessment", "HR Screening",
                "Technical Interview (Round 1)", "Technical Interview (Round 2+)",
                "Hiring Manager Interview", "On-site/Final Interview", "Offer Extended",
                "Offer Accepted", "Offer Declined", "Rejected", "Withdrew Application"
            ];
        }

        parseEmailButton.addEventListener('click', function() {
            const emailContent = emailTextInput.value;
            if (!emailContent.trim()) {
                alert("Please paste some email content.");
                return;
            }
            let companyName = "";
            let jobTitle = "";
            let status = "Applied"; 

            let companyMatch = emailContent.match(/at\s+([A-Za-z0-9\s.,'-]+?)(?:\s+Talent Acquisition|\s+Careers|\.|\n|,)/i);
            if (companyMatch && companyMatch[1]) {
                companyName = companyMatch[1].replace(/\.$/, '').trim(); // Remove trailing dot if captured
            } else {
                companyMatch = emailContent.match(/Team\s+([A-Za-z0-9\s.,'-]+)/i);
                if (companyMatch && companyMatch[1]) {
                    companyName = companyMatch[1].trim();
                }
            }
            
            const jobTitleMatch = emailContent.match(/(?:for|apply for|applying for|application for)\s+(?:the\s+)?(.+?)\s+position/i);
            if (jobTitleMatch && jobTitleMatch[1]) {
                jobTitle = jobTitleMatch[1].trim();
            }

            jobForm.companyName.value = companyName;
            jobForm.jobTitle.value = jobTitle;
            jobForm.status.value = status; 
            alert("Form pre-filled based on email text. Please review, add application date, and any other details.");
        });

        // Initial fetch of applications when the page loads
        document.addEventListener('DOMContentLoaded', fetchApplications);
    </script>
</MainLayout>
